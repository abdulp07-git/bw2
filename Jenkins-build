pipeline {
    agent any

    environment {
        SONAR_TOKEN = credentials('SonarCloudToken')  // Store your token securely in Jenkins credentials
        SONAR_PROJECT_KEY = "abdulp07-git_bw2"
        SONAR_ORG = "abdulp07-git"
        SONAR_HOST_URL = "https://sonarcloud.io"
        AZURE_SECRET = credentials('azure_principal_secret')
        AZURE_SUBSCRIPTION = credentials('azure_subscribtion')
        AZURE_TENANT = credentials('azure_tenant')
        AZURE_USER = credentials('azure_user')
        SSH_PRIVATE_KEY = credentials('my_ssh_key')
        REMOTE_USER = "azureuser"
        
        
    }

    stages {
        
        

        stage('Checkout') {
            steps {
                git "https://github.com/abdulp07-git/bw2.git"
            }
        }
        
        
        stage('Build infrastructure') {
            steps {
                script {
                    try {
                        // Authenticate with Azure
                        sh """
                        set -e
                        az login --service-principal -u $AZURE_USER -p $AZURE_SECRET --tenant $AZURE_TENANT
                        az account set --subscription $AZURE_SUBSCRIPTION
                        """

                        // Run Terraform commands
                        sh "terraform -chdir=infrastructure init -reconfigure"
                        sh "terraform -chdir=infrastructure plan -out=tfplan"
                        sh "terraform -chdir=infrastructure apply -auto-approve tfplan"

                        // Extract VM Public IP and assign it to REMOTE_HOST
                        def vmIp = sh(
                            script: "terraform -chdir=infrastructure output -raw vmip",
                            returnStdout: true
                        ).trim()

                        // Set the environment variable
                        env.REMOTE_HOST = vmIp
                        echo "Assigned VM Public IP to REMOTE_HOST: ${env.REMOTE_HOST}"

                    } catch (Exception e) {
                        echo "Terraform execution failed: ${e.message}"
                        currentBuild.result = 'FAILURE'
                        throw e
                    }
                }
            }
        }


        
        
        

        stage('Unit Test') {
            steps {
                sh 'mvn -f application/pom.xml test'
            }
        }

        stage('SonarCloud Scan') {
            steps {
                    sh '''
                        mvn -f application/pom.xml sonar:sonar \
                        -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                        -Dsonar.organization=${SONAR_ORG} \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.login=${SONAR_TOKEN}
                    '''
                }
            
        }

        
        stage('Build'){
            steps{
                sh 'mvn -f application/pom.xml clean package'
                
            }
        }
        
        
        stage("Build docker image"){
            steps {
                script {
                    def dockerImage = "bw89acr.azurecr.io/bw2"
                    def tag = "v${BUILD_NUMBER}"
                    def fullImageName = "${dockerImage}:${tag}"
                    sh "docker build -t ${fullImageName} -f application/Dockerfile application/"
                }
            }
        }
        
        stage("PUSH TO ACR") {
            steps {
                script {
                    
                    def dockerImage = "bw89acr.azurecr.io/bw2"
                    def tag = "v${BUILD_NUMBER}"
                    def fullImageName = "${dockerImage}:${tag}"
                    
                    // Authenticate to Azure
            sh """
                az login --service-principal -u $AZURE_USER -p $AZURE_SECRET --tenant $AZURE_TENANT
                az account set --subscription $AZURE_SUBSCRIPTION
            """
                    // Login to ACR
            sh "az acr login --name bw89acr"
            
                   // Push the image to ACR
            sh "docker push ${fullImageName}"
            
                    // Logout from Azure
            sh "az logout"
            
                    
                }
            }
        }
        

        stage ("Update the configuration"){
            steps {
                script {
                    sh """
                    sed -i "s|image: bw89acr.azurecr.io/maven:latest|image: bw89acr.azurecr.io/bw2:v${BUILD_NUMBER}|" aks-files/maven-app/maven.yml
                    """
                }
            }
        }


        
        
        stage ("Sync files to VM"){
            steps {
                withCredentials([sshUserPrivateKey(credentialsId: 'my_ssh_key', keyFileVariable: 'SSH_KEY')]) {
                    sh """
                    rsync -avz -e "ssh -i $SSH_KEY -o StrictHostKeyChecking=no" aks-files $REMOTE_USER@$REMOTE_HOST:.
                    """
                    }
                
            }
        }     
        
               
        
    } //stages finshed

    //post {
    //    success {
    //        build job: 'bw2-aks-deploy',
    //            wait: false,
    
       // }
    //}

}

